define(['app', 'breezeHelper'],function(app, breezeHelper){
    app.register.factory('dataContext',[dataContextFactory]);

    var DT = breeze.DataType;
    var Identity = breeze.AutoGeneratedKeyType.Identity;
    var defaultNamespace = 'test';
    var helper = new breeze.config.MetadataHelper(defaultNamespace);
    var addTypeToStore = helper.addTypeToStore.bind(helper);
    var serviceName = '/odata';

    function dataContextFactory(){
        function createMetadataStore(serviceName) {

            var store = new breeze.MetadataStore({
                namingConvention: breeze.NamingConvention.camelCase
            });

            helper.addDataService(store, serviceName);
            return store;
        }

        var store = createMetadataStore(serviceName);

        addUser(store);
        addProduct(store);
        addCategory(store);

        breeze.config.initializeAdapterInstances({
            dataService: "OData"
        });

        var manager = new breeze.EntityManager({
            serviceName: serviceName,
            metadataStore: store
        });

        return manager;
    }

    function addUser(store){
        var et = {
            shortName: "User",
            autoGeneratedKeyType: Identity,
            defaultResourceName: "Users",
            dataProperties: {
                id: { type: DT.Int32, isPartOfKey: true },
                name: { max: 50 },
                email: { max: 400 }
            }
        };

        return et = addTypeToStore(store, et);
    }

    function addProduct(store){
        var et = {
            shortName: "Product",
            autoGeneratedKeyType: Identity,
            defaultResourceName: "Products",
            dataProperties: {
                id: { type: DT.Int32, isPartOfKey: true },
                name: { max: 50 },
                imageUrl: {max: 400},
                price: {type: DT.Int32}
            }
        };

        return et = addTypeToStore(store, et);
    }

    function addCategory(store){
        var et = {
            shortName: "Category",
            autoGeneratedKeyType: Identity,
            defaultResourceName: "Categories",
            dataProperties: {
                id: { type: DT.Int32, isPartOfKey: true },
                name: { max: 50 },
                imageUrl: {max: 400},
                note: {max: 500}
            },
            navigationProperties: {

            }
        };

        return et = addTypeToStore(store, et);
    }

});





